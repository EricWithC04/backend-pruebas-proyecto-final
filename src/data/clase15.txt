# ¿Qué es la Complejidad Algorítmica?

## Introducción

La complejidad algorítmica es un concepto fundamental en la ciencia de la computación que nos ayuda a entender y comparar la eficiencia de los algoritmos. Se refiere a la cantidad de recursos computacionales que un algoritmo requiere en términos de tiempo (tiempo de ejecución) y espacio (memoria). En esta clase, exploraremos los conceptos básicos de la complejidad algorítmica y cómo se mide.

## Importancia de la Complejidad Algorítmica

La complejidad algorítmica es crucial por varias razones:
- **Eficiencia:** Permite evaluar la eficiencia de un algoritmo y seleccionar el más adecuado para un problema dado.
- **Escalabilidad:** Ayuda a predecir cómo se comportará un algoritmo a medida que aumenta el tamaño de los datos.
- **Comparación:** Facilita la comparación entre diferentes algoritmos para resolver el mismo problema.

## Medición de la Complejidad Algorítmica

### Notación Big-O

La notación Big-O se utiliza para describir la complejidad de un algoritmo de manera asintótica, es decir, cómo se comporta a medida que el tamaño de entrada crece hacia el infinito. Nos proporciona una forma de expresar la eficiencia del peor caso de un algoritmo.

Ejemplos de notaciones Big-O comunes:
- `O(1)` - Constante: El tiempo de ejecución no depende del tamaño de la entrada.
- `O(log n)` - Logarítmica: El tiempo de ejecución crece logarítmicamente con el tamaño de la entrada.
- `O(n)` - Lineal: El tiempo de ejecución crece linealmente con el tamaño de la entrada.
- `O(n log n)` - Logarítmica lineal: El tiempo de ejecución crece linealmente con un factor logarítmico.
- `O(n^2)` - Cuadrática: El tiempo de ejecución crece cuadráticamente con el tamaño de la entrada.
- `O(2^n)` - Exponencial: El tiempo de ejecución crece exponencialmente con el tamaño de la entrada.

### Ejemplos Prácticos

#### Ejemplo 1: Búsqueda Lineal

La búsqueda lineal es un algoritmo que recorre una lista para encontrar un elemento específico. Su complejidad en el peor caso es `O(n)` porque en el peor de los casos, debe recorrer toda la lista.

```python
def busqueda_lineal(lista, objetivo):
    for i in range(len(lista)):
        if lista[i] == objetivo:
            return i
    return -1
```

#### Ejemplo 2: Búsqueda Binaria

La búsqueda binaria es un algoritmo más eficiente que la búsqueda lineal para listas ordenadas. Su complejidad en el peor caso es O(log n) porque divide la lista a la mitad en cada paso.

```python
def busqueda_binaria(lista, objetivo):
    bajo = 0
    alto = len(lista) - 1
    while bajo <= alto:
        medio = (bajo + alto) // 2
        if lista[medio] == objetivo:
            return medio
        elif lista[medio] < objetivo:
            bajo = medio + 1
        else:
            alto = medio - 1
    return -1
```

### Comparación de Complejidades

La siguiente tabla compara diferentes órdenes de crecimiento para varios tamaños de entrada **n**:

| `n`  | `O(1)` | `O(log n)` | `O(n)` | `O(n log n)` | `O(n^2)` | `O(2^n)` |
|------|--------|------------|--------|--------------|----------|----------|
| 1    | 1      | 0          | 1      | 0            | 1        | 2        |
| 10   | 1      | 3          | 10     | 30           | 100      | 1024     |
| 100  | 1      | 6          | 100    | 600          | 10,000   | 1.27E30  |
| 1,000| 1      | 9          | 1,000  | 9,000        | 1,000,000| 1.07E301 |

## Conclusión

La complejidad algorítmica es una herramienta esencial para evaluar y comparar la eficiencia de los algoritmos. Utilizando la notación Big-O, podemos describir cómo se comporta un algoritmo a medida que el tamaño de la entrada crece y seleccionar el algoritmo más adecuado para un problema dado. Comprender la complejidad algorítmica nos ayuda a escribir código más eficiente y escalable.

---

**Autor:** Eric Alejandro Mercado  
**Fecha:** 23 de Junio, 2024